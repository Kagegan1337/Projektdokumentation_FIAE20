Zielsetzung
    Aus den im Lastenheft definierten Anforderungen an die Erweiterung des Übersetzungs-
    dienst und der Anbindung der OktoPOS Kassensoftware OktoCASH sind folgende Teilaufgaben entstanden:
        - Schaffen einer Schnittstelle welche die Dateiformatierung der Kassensoftware annimmt und verarbeiten kann
        - Erweiterung der Datenbank hinsichtlich der Versionierung von Übersetzungen
        - Schaffen einer neuen Schnittstelle zum vergleichen der Version und dem download abhängig einer Version
        - Anzeige der Version in der Oberfläche
        - Erstellen und Freigeben einer neuen Version 
        - Entwickeln eines Javamoduls mit dem Zweck den Übersetzungsdienst anzusprechen 
        - 
        - Datenbankänderung sind zu dokumentieren
        - Geschäftslogik des Javamoduls ist testbar. Ein buildscript in der Sprache gradle ist zu erstellen.
        - Schnittstellen sind zu testen und zu dokumentieren
        - Das Parsen der Property Dateien wird von einem vorhandenen SDK übernommen, welches die property dateien einließt,
            daraus das schnittstellenkonfromes Format (JSON) baut und dieses an die richtige Schnittstelle sendet.
    
    Datenbankerweiterung
        Da die Kassensoftware in unterschiedlichen Versionen betrieben werden kann, gibt es auch Unterschiede in 
        bestehenden Übersetzungstokens. Dabei kann ein Token in Version x den Wert a haben und in der Version y den Wert b.
        
        Version besteht aus id, name und datum. 
        Es wurde bewusst nicht die Versionsnummervergabe Major,Minor,Patch verwendet da auch andere Formate und nicht numerische Nummern
        in der Umgebung von OktoPOS verwendet werden. 

        Zur Realisierung der Version wird das bestehende relationale Datenbankschema (siehe Anhang xxx) um die Entität
        Version erweitert. Die neue Entität wird in eine 1:n Relation mit der Entität Translation gesetzt.
        < Ausschnitt der Anpassung >
        Der Token selbst ist auch mit einer Version versehen um abzubilden, ob dieser in einer Version bereits vorhanden war, nur noch nicht übersetzt. 
        Ein Token kann in mehreren Versionen vorkommen und eine Version beinhaltet mehrere Tokens. Daher ist eine zwischentabelle token_version notwendig.
        < Ausschnitt token - version >  
        Dadurch entsteht ein neues Datenbankschema(siehe Anhang xxx ERD neu)
    
    APIs
    https://app.swaggerhub.com/apis/Abschlussprojekt/Translationservice/1-oas3#free

        Nach Absprache mit dem zuständigen Projektleiter für den vorhanden Translationservice ergeben sich folgende neue Schnittstellen. Dabei wurde der Fokus 
        auf die Versionierung gelegt:
            (siehe swaggerfile)
        Testen der APIs inklusive einer Testdatenbank (Research)
    
    UI Erweiterung
        Die Tokens inklusive der Übersetzung (nullable) abhängig von der Version angezeigt. Dafür wird ein Dropdown angelegt, welches die 
        einzelnen Versionen anzeigt und per Klick werden die Tokens mit der richtigen Version angezeigt.
    
    Javamodul 
        - Verwendetes Language Level 8
        - Buildscript gradle
        - Sendet über einen HTTP GET Request seine aktuell verwendete Version an den Übersetzungsdienst.
        - Verwendete Minor and Major werden von der Kassesoftware geliefert.
        - Ggf. werden neue Übersetzungsdateien gedownloaded.
            - Json in Propertydateien umwandeln (converter)
            - Neue Übersetzungsdateien in den Klassenpfad der Kasse legen.
        - Steuerung des Tools über cmd. (Cmd Parser)
        - Testen des converters (JUNIT)
        - 