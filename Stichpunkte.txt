Einleitung:
    Behandlet interdisziplinare Berührungspunkte wie z.b. Java, Php, Gradle, Git und das Deployment von Software

Projektdokumenatation:
    Vorab (Mdl Prüfung):
        Der Übersetzungsdienst war das erste Projekt mit dem ich bei ehemals White-Paper-Media betraut wurde. Es ist von mir unter Aufsicht einers Seniors geplant und programiert worden.
        Das Projekt diente dazu, mich in einer für mich fremden Programiersprache einzuarbeiten. Anhand dieses Projektes kann ich ebenfalls meine Weiterentwicklung während meiner Aubsildung 
        erkennen.

    IST-Analyse (Aktueller Zustand)

    Soll-Analyse

        Kassensoftware:
            Anlegen eines neuen Tokens:
                Der neu Token wird weiterhin in eine property datei mit einer exemplarischen Übersetzung eingetragen. 
                Mit dem Merge in den Master Branch werden über einen Webhook die "neuen" Tokens an den Übersetzungsdienst geleitet.
            Holen neuer Übersetzungen:
                Da die Übersetzungsdateien vor dem Start der Java application im classpath liegen müssen, muss ein unabhängiges Programm die 
                die aktuellste Version der Übersetungsdateien vom TranslationService anfragen. Das unabhängige Programm ist in Java programmiert. 
                Dabei übernimmt die Anwendung zwei Áufgaben.
                    1. Anfragen der aktuellsten Version die im Übersetzungsdienst hinterlegt ist.
                    2. Wenn es neue Übersetzungen gegeben hat, werden die neuen Datein in den classpath der Anwendung gelegt.
                GGf. kann die Anwendung zu einem späteren Zeitpunkt als Modul in die Kassensoftware integriert werden. 
                Im Rahmen des Projektes soll die Integrität des Quellcodes der Kassensoftware gerwährleistet werden. 
                Wenn neue Übersetzungen zur Verfüngung stehen, werden diese vom Übersetzungsdienst in der Antwort mitgesendet, ansonsten ohne Content
                Überprüfung bei jedem Kassenstart.
                Das zusätzliche Programm wandelt das eingehende JSON in eine property datei um.

            Die Synchronisation der Tokens wird durch den Transaltionservice abgesichert.
            Anpassen des GitLab Repositories. Werden neue Commits auf den Master geschrieben und es gibt Änderungen an den Übersetzungsdateien, werden die property Dateien an die neue Schnittstelle des
            Translationservice geschickt. 
            
        TransaltionService
            - Funktionale Änderungen
                - Versionierung (!ÜBERARBEITUNGSFÄHIG!)
                    Das größte Problem bei der Anpassung am Übersetzungsdienst ist die Implementierung der Versionierung. Als Lösung dient eine neues Untermenu, in dem 
                    die Version als Major - Minor - Patch - Revision gespeichert werden kann. Zur Dokumentation der Änderungen gibt es ein Textfeld in dem eine Kommentar zur Version
                    hinzugefügt werden kann.
                    Übersetzungen werden über die Version auf einen Token abgebildet.
                    
                    Änderungen müssen über ein Menu freigegeben werden. Version ist damit freigegeben.
                    Jede weitere Änderung führt dazu, das eine neue Version angelegt wird. Alle nachfolgenden Änderungen müssen dann wieder freigegeben werden.
                    Eine neue Version kann nur abgerufen werden, wenn diese Freigegeben wird. 
                    Der Freigebeprozess beinhaltet ein Dokumentationsfeld.
                    Änderung werden über den Speichernbutton erkannt. If(version.persited()) -> createNewVersion() else nothing

                    Neue Tokens werden in die aktuell nicht freigegebene Version übernommen.
                    Nach Freigabe -> neues Unterverzeichnis mit versionsnamen und einem Dump der Property dateien.
                    In einem Unterverzeichnis (TranslationFilesCashDesk) liegen Versionsverzeichnise. Die Versionsverzeichnisse werden nach ihrer Version benannt. In den Verzeichnissen liegen die 
                    Property Datein für die Kassensoftware

                    Eine Schnittstelle empfängt eine Versionsnummer. Ist die Versionsnummer älter als die aktuellste freigegebene Version wird der Inhalt des aktuellsten 
                    Versionsverzeichnis als Response gesendet (Response code 200).
                    Stimmt die Versionummer mit der aktuellsten überein, wird als Response 204 gesendet 

                    Über eine Schnittstelle kann die aktuellse Version abgefragt werden.
                    Über eine Schnittstelle können Versionen abgerufen werden.
                    Über eine Schnittstelle kann ein Dump einer bestimmten Schnittstelle abgerufen werden.

                    Erweiterung der Datenbank um die Entität Version. Anpassen der bestehenden Entitäten.

                - Oberfläche 
                    - Dropdown Menu zum Anzeigen der Tokens einer Version
                    - Dashboard: Zeigt den Übersetzungsstand der Tokens in einer Version

            - Bietet in der Oberfläche einen neuen Button zum Downloaden von Translation files als properties
            - Neue Schnittsellen:
                - Annahme von property Dateien
                - 
            - Neue Schnittstelle welche property Dateien annimmt, verarbeitet und die gelesenen Tokens in einer Datenbank speichert.
            - Neue Schnittstelle 
            - Um die Integrität des Kassencodes zu gewährleisten werden die Dateinamen der Übersetzungsdatei nicht angepasst. Deswegen bekommt der Übersetzungsdienst eine
              ein Klasse die die frei gewählten Akronyme auf eine reale Sprache abbildet.
            - 
            
    Kosten-Nutzen-Analyse
    
    Lastenheft:
        - Aus den Stichpunkten der IST-Analyse und den Vorgaben 
    
    Entwürfe:
        Erweiterung des Datenbankmodells
            - Neues ERD und Diff zum Alten
        Erweiterung der neue Schnittstellen
            - REST Schnittstellenbeschreibung über Swagger
        Entwurf des Java Clients
            - Klassendiagramm
            - Testcases

    Pflichtenheft
        - Auszug aus Projektplanung und Realisierung
        
        Zeitplanung
        Grobe Zeitplanung:
            Analysephase: 7h
            Entwurfsphase: 11h
            Implementierungsphase: 35h
            Abhname 1h
            Dokumentation 14h
        Genau Zeitplanung
            Analysephase
                IST-Analyse
                SOLL-Analyse
                Kosten-Nutzen-Analyse
                Erstellung des Lastenhefts
            Entwurfsphase
                Erweiterung des Datenbankmodells
            Implementierungsphase
            Abnahme
            Dokumentation



Ist-Analyse:
EPK Übersetzung Kasse
Stuktur
Aufgaben
Kommunikation
Daten
Dokumente 
Schwachstellen

To-Do's
    Ist-Analyse
        Beschreibung der aktuellen Systeme
        UseCase Diagramme
        Erd Diagramme
        Swagger
        TokenDiff als Pseudocode
        JavaApp als Aktivitätsdiagramm
        Beschreibung der Testumgebung (Mockup der Datenbank für unverfälschte Testergebnisse, PHPUnit)

    Soll-Analyse
        
    Kosten-Nutzen-Analyse
    Lastenheft

    Entwurf: Erweiterung der Datenbank
    Entwurf: 

Glossar:
    
    Annotations
    Buildserver
    Caching
    Classpath
    Client
    Dashboard
    Datenbankschema
    Deployment
    Interface
    JSON
    Langauagelevel
    Multilingualität
    ORM
    POS-System
    Prorpertyformat
    Propertypaare
    Stylesheet
    Token 
    
    
               

    PK Übersetzung wird geändert in TokenId(PK FK) + Version(PK FK) -> Übersetzung.

    Vgl. zum Projektantrag:
        - Resourcenplanung (0.5h)
        - Neue Schnittstelle zum Annehmen von Property Dateien.
        - Analysephase dauert länger als veranschlagt, dafür wurde nicht so viel Zeit in der Implementierungsphase benötigt.
    
    Schwierigkeiten:
        - Integrieren der Version
        - IST / SOLL Analyse dauert länger als veranschlagt
    Fragen an Martens:
        Worfür wurde die Entity Import angelegt? (Noch notwendig)

Ausblick:
    Versionnierung Location
    Konfiguration des Translationupdater
    Versionanfrage: Gibt es Erneuerungen für die mitgeschickte Version
    

Das Projekt ist ein unternehmensinterner Auftrag zur Optimierung des Übersetzungsworkflow. Außerdem wirkt sich die neue Versionierung der Übersetzung und Tokens unterstützend auf die 
    Nutzung unterschiedlicher Übersetzungen je Token in unterschiedlichen Versionen aus. 
    Die Hauptentlastung kommt zu gunsten der Abteilung für Übersetzung. Neben dem benutzerfreundlichen Front-End des TranslationService, haben die Übersetzer keine 
    Berührungspunkte mit den unstrukturierten Übersetzungsdateien.